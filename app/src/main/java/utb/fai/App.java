/*
 * This source file was generated by the Gradle 'init' task
 */
package utb.fai;

import java.net.URI;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {

	public static void main(String[] args) {
		ConcurrentLinkedQueue<URIinfo> foundURIs = new ConcurrentLinkedQueue<>();
		Set<URI> visitedURIs = Collections.synchronizedSet(new HashSet<URI>());
		ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();
		int maxDepth = 2;

		if (args.length < 1) {
			System.err.println("Missing parameter - start URL");
			return;
		}

		if (args.length == 2) {
			try {
				maxDepth = Integer.decode(args[1]);
			} catch (NumberFormatException e) {
				System.err.printf("Argument %s is not integer, using default value", args[1], maxDepth);
			}
		}

		try {
			URI startURI = new URI(args[0]);
			foundURIs.add(new URIinfo(startURI, 0));

			ExecutorService executorService = Executors.newFixedThreadPool(8);
			URIinfo uri = foundURIs.poll();
			Parser initialParser = new Parser(visitedURIs, foundURIs, map, uri.uri, uri.depth);
			executorService.execute(initialParser);

			Thread.sleep(3000);

			while (!foundURIs.isEmpty()) {
				// System.out.println(foundURIs.isEmpty());
				URIinfo uriInfo = foundURIs.poll();
				if (uriInfo.depth <= maxDepth) {
					Parser parser = new Parser(visitedURIs, foundURIs, map, uriInfo.uri, uriInfo.depth);
					executorService.execute(parser);
				} else
					break;
			}
			executorService.shutdown();
			executorService.awaitTermination(10, TimeUnit.MINUTES);
			Parser.printResults(map);
		} catch (Exception e) {
			// e.printStackTrace();
		}
	}
}
